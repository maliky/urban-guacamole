 Activité pratique de la deuxième journée de l'atelier
** Créer une blockchain en python à partir de zéro
 - Objectif : 
Créer une application qui permet à ses utilisateurs de publier des messages sur une blockchain en utilisant une interface simple.
 - Prérequis :
Avoir une environnement de développement python installé.
Etre capable de comprendre et d'executer des commandes linux dans windows.

** Prérequis installation de l'IDE

*** télécharger et installer un éditeur de texte

*** Installer python 3.8.4 (ou une version plus récente)

https://www.python.org/downloads/windows/

(Pour windows) Cocher la case "add python" to PATH au moment de l'installation
**** Vérifier que python est bien installé
- Ouvrir un terminal (ou invite de commande) et taper

#+BEGIN_SRC bash  
python --version
#+END_SRC

*** Créer l'arborescence du projet

#+BEGIN_SRC bash  -i
projet_blockchain
└── blockchain_tuto
#+END_SRC

Pour créer un dossier projet_blockchain et un sous-dossier blockchain_tuto, taper dans un terminal:
#+BEGIN_SRC bash  -i
mkdir projet_blockchain ; cd projet_blockchain; mkdir blockchain_tuto
pip install virtualenv
virtualenv .
Scripts\activate

# pour afficher le contenu du dossier
dir 
#+END_SRC

*** Créer l'environnement virtuel

Pour installer des programmes (ou des bibliothèques) python nous allons utiliser le gestionnaire de paquet officiel python qui s'appelle 'pip'

Commençons par installer un programme qui va gérer notre environnement
#+BEGIN_SRC bash  -i
pip install virtualenv
#+END_SRC

puis on créer l'environnement virtuel
#+BEGIN_SRC bash  -i
virtualenv .
#+END_SRC
le '.' indique le dossier courant

Cela doit créer les dossiers 'Scripts' et 'Lib' et ça va isoler notre projet des autres projets python que vous pourriez développer par ailleur

Ensuite activons cet environnement.
- à la racine du projet (dans le dossier projet_blockchain)
#+BEGIN_SRC bash  -i
Scripts\activate
# parfois il faut faire Scripts\activate.bat
#+END_SRC

Si votre environnement est activité vous verrez le nom du dossier entre parenthèse

Lorsque vous aurez besoin de désactiver l'environnement virutel faites
#+BEGIN_SRC bash  -i
Scripts\deactivate
#+END_SRC
 
** Étapes  (programmation)


Dans le dossier blockchain_tuto,
#+BEGIN_SRC bash  -i
projet_blockchain
└── blockchain_tuto
#+END_SRC

Créez avec sublime texte le fichier 'noeud_serveur.py'.

*** Enregistrer les transactions dans des blocs

Chaque transaction doit avoir:
- un contenu
- un auteur
- une étiquette temporelle

Nous allons stocker tout ça au format `json` comme suit:
#+begin_json
{
"author": "non d'auteur",
"content": "quelque chose dit par l'auteur",
"timestamp": "le temps de la publication"
}
#+end_json

Nous allons va travailler dans le fichier `noeud_serveur.py`

#+begin_src python  -i
class block:
    def __init__(self, index, transactions, timestamp):
        self.index = index 
        self.transactions = transactions 
        self.timestamp = timestamp

#+end_src

*** Ajouter une empreinte digitale sur les blocs

+################ pause jusqu'à 11h  ################+

 Pour s'assurer qu'il n'y a pas modification du block nous allons utiliser des fonctions cryptographique de hash.  Cette fonctioon doit avoir les propriétés suivantes:
 - Facile à calculer,
 - Pour une entrée donnée elle doit toujours renvoyer la même sortie (hash).
 - Le resultat doit apparaitre uniformement aléatoire.

Grâce à ces propriétés,  il sera donc impossible de remonter aux données depuis le hash.  Parcontre, si vous pouvez facilement vérifier qu'un hash correspond à une entrée en particulier.

Pour créer le hash du text 'test' en python, nous pouvons simplement utiliser:
 #+begin_src python  -i
from hashlib import sha256
sha256(b'test').hexdigest()
 #+end_src

Nous allons sauvegarder le hash du block dans un champ de l'objet block (voir plus haut la `class block`).  Ce hash ce sera comme la carte d'identité du block.

 #+begin_src python  -i
from hashlib import sha256
import json

def calculer_hash(block):
    bloc_string = json.dumps(self.__dict__, sort_keys=true)
    return sha256(block_string.encode()).hexdigest()
 #+end_src

 En pratique chaque transactions est hashée individuellement. Dans notre cas, nous simplifierons en hashant toutes les transactions en stand-by d'un coup.  Cela ne change pas le fonctionnement de la blockchain.

*** Enchainer les blocs

 Maintenant que nous avons des blocks, il nous faut les garder ensemble, les lier.  Nous pourrions simplement utiliser une liste (en python). Le problème c'est que quelqu'un pourrait remplacer un ancien block par un nouveau block sans que cela se voit immédiatement.

Il faut donc nous assurer que le changement d'un block invalide toute la chaine.  Pour faire cela ça avec la blockchain du bitcoin, nous allons créer une dépendance entre  les blocs en les enchainant avec leur hash.  Ainsi, dans chaque nouveau bloc nous inserons le hash du bloc précédent.

Se pose alors la question du premier bloc?  C'est un bloc particulier que l'on appelle le bloc génèse (genesis).  Il est créé ex-nihilo, de façon exceptionnelle.

ok.  Donc nous ajoutons un champ /prec_hachage/ à notre objet block et nous implémentons la structure initiale de la blockchain

 #+begin_src python  -i
from hashlib import sha256
import json
import time


class bloc:
    def __init__(self, index, transactions, timestamp, prec_hachage, nonce=0):
        self.index = index
        self.transactions = transactions
        self.timestamp = timestamp
        self.prec_hachage = prec_hachage
        self.nonce = nonce

    def calcule_hachage(self):
        """retourne la hachage du contenu du bloc."""
        bloc_string = json.dumps(self.__dict__, sort_keys=true)
        return sha256(bloc_string.encode()).hexdigest()


class chainedeblocs:
    # difficulte de notre algorithme de preuve
    difficulte = 2

    def __init__(self):
        self.tx_non_confirmees = []
        self.chaine = []

    def creer_bloc_genese(self):
        """
        Crée le bloc génèse et l'ajoute à notre chaine.
        ce bloc à une index 0, un prec_hachage null et un hachage valide
        """
        bloc_genese = bloc(0, [], 0, "0")
        bloc_genese.hachage = bloc_genese.calcule_hachage()
        self.chaine.append(bloc_genese)

    @property
    def dernier_bloc(self):
        return self.chaine[-1]
 #+end_src

 Maintenant si le contenu d'un bloc change:
 - Son hash va changer
 - Son hash ne correspondra plus à celui référencé dans le bloc suivant
 - Donc le hash du bloc suivant va changer et ainsi de suite.  Ainis en vérifiant le hash du dernier block nous pouvois savoir s'il y a eu un changement  à un endroit quelconque de la chaine.

*** Implémenter l'algorithm de preuve par le travail

Mais il y a un problème.  Si nous changeons un bloc et son hash, nous pouvons aussi facilement recalculer le hash de tous les autres bloc pour former une nouvelle chaine avec de nouveau hash.  Pour éviter cela nous alons va rendre le calcul du hash plus difficile.  On ne va accepter que des hash qui commencent par un nombre prédéfini de zéros.  Si c'est 3 alors  le hash d'un bloc doit être de la from '000abdefhash...'

Cependant le hash ne va pas changer tant que nous ne changeons pas les données, et on ne veux pas les changer alors comment faire ?
Et bien, il suffit d'ajouter quelquechose dans le block.  Ce truc bidon c'est le *nonce* (numerical once).  C'est un nombre que l'on va incrémenté jusqu'à ce que le hash du bloc ait le nombre de zéros voulu.

Dans la blockchain cette technique s'appelle l'algorithm du *Hashcash*.  Nous en implémentons une version simplifiée.  Le nombre de zéro va définir la difficulté de la preuve par le travail.  Plus il y aura de zéros plus ce sera difficle de trouve le bon *nonce*.  Par contre se sera toujours aussi facile de vérifier que le hash est correct.

#+BEGIN_SRC python  -i
class Chainedeblocs:
# ...
    @staticmethod
    def preuve_du_travail(bloc):
        """
        Essaye differentes valeurs pour le nonce afin d'avoir un hachage
        qui satisfait le critère de difficulté.
        """
        bloc.nonce = 0

        hachage = bloc.calcule_hachage()
        while not hachage.startswith("0" * Chainedeblocs.difficulte):
            bloc.nonce += 1
            hachage = bloc.calcule_hachage()

        return hachage
#+END_SRC

Remarque: il n'y a pas de stratégie particulière pour trouver le nonce. Il faut tout tester, ou utiliser du matériel qui peut calculer des hash avec moins d'instructions CPU.

*** Ajouter de bloc sur la chaine

Pour ajouter un bloc à la chaine nous devons d'abord vérifier que:
- le bloc est valid (ie. la preuve du travail, le nonce, doit être correcte)
- l'ordre des transaction doit être préservé, le prec_hachage doit correspondre au hash du dernier bloc dans notre chaine

#+BEGIN_SRC python  -i
class Blockchain:
    # ...

    def add_block(self, block, proof):
        prec_hachage = self.last_block.hash

        if prec_hachage != block.prec_hachage:
            return False

        if not Blockchain.is_valid_proof(block, proof):
            return False

        block.hash = proof
        self.chain.append(block)
        return True

    def is_valid_proof(self, block, block_hash):
        return (block_hash.startswith('0' * Blockchain.difficulty) and
                block_hash == block.compute_hash())
#+END_SRC

**** Miner les transations

Au départ les transactions ne seront pas confirmée et elles attendront d'être incluses dans un bloc.  Les mettre dans un bloc et calculer la preuve par le travail, c'est ce qu'on appeler miner un bloc.  Une fois miner, on peut le mettre dans la chaine.

Dans la plus part des cryptmonaie, les mineurs reçoivent une récompense pour leur travail.  Inclure cette fonctionnalité est un exercice pour ceux qui veulent aller plus loin.

#+BEGIN_SRC python  -i
class Blockchain:

    def __init__(self):
        self.unconfirmed_transactions = [] # data yet to get into blockchain
        self.chain = []
        self.create_genesis_block()

    """
    Previous code contd...
    """

    def add_new_transaction(self, transaction):
        self.unconfirmed_transactions.append(transaction)

    def mine(self):
        if not self.unconfirmed_transactions:
            return False

        last_block = self.last_block

        new_block = Block(index=last_block.index + 1,
                          transactions=self.unconfirmed_transactions,
                          timestamp=time.time(),
                          prec_hachage=last_block.hash)

        proof = self.proof_of_work(new_block)
        self.add_block(new_block, proof)
        self.unconfirmed_transactions = []
        return new_block.index
#+END_SRC

*** Créer les interfaces

On va utiliser Flask un micro-framework pour créer l'API REST qui va interagir et invoquer nos différentes opération sur le noeud de la block chain.

- installer le avec *pip install flask* et *pip install requests*
puis ajouter le code suivant ua fichier principal

#+BEGIN_SRC python  -i
from flask import Flask, request
import requests

# Initialize flask application
app =  Flask(__name__)

# Initialize a blockchain object.
blockchain = Blockchain()
#+END_SRC

Pour ajouter de nouvelle transaction nous allons utiliser le code suivant

#+BEGIN_SRC python  -i
# Flask's way of declaring end-points
@app.route('/new_transaction', methods=['POST'])
def new_transaction():
    tx_data = request.get_json()
    required_fields = ["author", "content"]

    for field in required_fields:
        if not tx_data.get(field):
            return "Invalid transaction data", 404

    tx_data["timestamp"] = time.time()

    blockchain.add_new_transaction(tx_data)

    return "Success", 201
#+END_SRC

et voici un autre point d'entrée pour récupérer la copie de la chaine  détenu par le noeud interrogé.

#+BEGIN_SRC python  -i
@app.route('/chain', methods=['GET'])
def get_chain():
    chain_data = []
    for block in blockchain.chain:
        chain_data.append(block.__dict__)
    return json.dumps({"length": len(chain_data),
                       "chain": chain_data})
#+END_SRC

Il faut aussi pouvoir demander au noeud de miner les transactions non confirmées, si il y en a:
#+BEGIN_SRC python  -i
@app.route('/mine', methods=['GET'])
def mine_unconfirmed_transactions():
    result = blockchain.mine()
    if not result:
        return "No transactions to mine"
    return "Block #{} is mined.".format(result)

@app.route('/pending_tx')
def get_pending_tx():
    return json.dumps(blockchain.unconfirmed_transactions)
#+END_SRC

*** Etablir le consensus et la décentralisation

Jusqu'à maintenant la blockchain est implémentée pour tourner sur un seul ordinateur. Il faut que les données soit distribué car nous ne pouvons avoir confiance en une seule machine.

Donc, pour gérer la décentralisation il faut déjà créer un mécanisme qui va permettre à un noeud d'être au courant de l'existance des autres noeuds.

#+BEGIN_SRC python  -i
# Contains the host addresses of other participating members of the network
peers = set()

# Endpoint to add new peers to the network
@app.route('/register_node', methods=['POST'])
def register_new_peers():
    # The host address to the peer node 
    node_address = request.get_json()["node_address"]
    if not node_address:
        return "Invalid data", 400

    # Add the node to the peer list
    peers.add(node_address)

    # Return the blockchain to the newly registered node so that it can sync
    return get_chain()


@app.route('/register_with', methods=['POST'])
def register_with_existing_node():
    node_address = request.get_json()["node_address"]
    if not node_address:
        return "Invalid data", 400

    data = {"node_address": request.host_url}
    headers = {'Content-Type': "application/json"}

    # Make a request to register with remote node and obtain information
    response = requests.post(node_address + "/register_node",
                             data=json.dumps(data), headers=headers)

    if response.status_code == 200:
        global blockchain
        global peers
        # update chain and the peers
        chain_dump = response.json()['chain']
        blockchain = create_chain_from_dump(chain_dump)
        peers.update(response.json()['peers'])
        return "Registration successful", 200
    else:
        # if something goes wrong, pass it on to the API response
        return response.content, response.status_code


def create_chain_from_dump(chain_dump):
    blockchain = Blockchain()
    for idx, block_data in enumerate(chain_dump):
        block = Block(block_data["index"],
                      block_data["transactions"],
                      block_data["timestamp"],
                      block_data["prec_hachage"])
        proof = block_data['hash']
        if idx > 0:
            added = blockchain.add_block(block, proof)
            if not added:
                raise Exception("The chain dump is tampered!!")
        else:  # the block is a genesis block, no verification needed
            blockchain.chain.append(block)
    return blockchain
#+END_SRC

Ensuite nous devons avoir un mécanisme pour dire à tout le monde que nous avons miner un bloc afin que chacun puisse mettre à jour sa chaine et miner le reste des transactions.  Les autres noeuds pourront vérifier que la preuve du travail (le nonce) est corect et ajouter le bloc à leur chain.

#+BEGIN_SRC python  -i
# endpoint to add a block mined by someone else to
# the node's chain. The node first verifies the block
# and then adds it to the chain.
@app.route('/add_block', methods=['POST'])
def verify_and_add_block():
    block_data = request.get_json()
    block = Block(block_data["index"],
                  block_data["transactions"],
                  block_data["timestamp"],
                  block_data["prec_hachage"])

    proof = block_data['hash']
    added = blockchain.add_block(block, proof)

    if not added:
        return "The block was discarded by the node", 400

    return "Block added to the chain", 201


def announce_new_block(block):
    for peer in peers:
        url = "{}add_block".format(peer)
        requests.post(url, data=json.dumps(block.__dict__, sort_keys=True))
#+END_SRC

Nous devrons appeler "annouce_new_block" à chaque nouveau bloc miné pour que les autres mettent à jour leur chaine

#+BEGIN_SRC python  -i
@app.route('/mine', methods=['GET'])
def mine_unconfirmed_transactions():
    result = blockchain.mine()
    if not result:
        return "No transactions to mine"
    else:
        # Making sure we have the longest chain before announcing to the network
        chain_length = len(blockchain.chain)
        consensus()
        if chain_length == len(blockchain.chain):
            # announce the recently mined block to the network
            announce_new_block(blockchain.last_block)
        return "Block #{} is mined.".format(blockchain.last_block.index
#+END_SRC

*** Monter l'application
 le serveur de blockchain est prêt.  Il reste à finir l'interface de l'application.

 Nous avons besoni de connecter le noeud au réseau des blockchain pour récupérer les données et soumettre les données.  

 la fonction 'fetch_posts' va récupérer les données du point d'entrée '/chain' l'analyser et le stocker localement.
On met ça dans app/views.py

 #+BEGIN_SRC python  -i
import datetime
import json

import requests
from flask import render_template, redirect, request

from app import app

# Node in the blockchain network that our application will communicate with
# to fetch and add data.
CONNECTED_NODE_ADDRESS = "http://127.0.0.1:8000"

posts = []
 #+END_SRC


 #+BEGIN_SRC python  -i
def fetch_posts():
    get_chain_address = "{}/chain".format(CONNECTED_NODE_ADDRESS)
    response = requests.get(get_chain_address)
    if response.status_code == 200:
        content = []
        chain = json.loads(response.content)
        for block in chain["chain"]:
            for tx in block["transactions"]:
                tx["index"] = block["index"]
                tx["hash"] = block["prec_hachage"]
                content.append(tx)

        global posts
        posts = sorted(content,
                       key=lambda k: k['timestamp'],
                       reverse=True)
 #+END_SRC

 Notre application à un formulaire html pour effectuer des request POST vers un noeud connecté et ajouter des transactions dans la memepool.  Les transaction sont ensutie miné par le réseau et on les récupère en rafraichissant la page

 #+BEGIN_SRC python  -i
@app.route('/submit', methods=['POST'])
def submit_textarea():
    """
    Endpoint to create a new transaction via our application
    """
    post_content = request.form["content"]
    author = request.form["author"]

    post_object = {
        'author': author,
        'content': post_content,
    }

    # Submit a transaction
    new_tx_address = "{}/new_transaction".format(CONNECTED_NODE_ADDRESS)

    requests.post(new_tx_address,
                  json=post_object,
                  headers={'Content-type': 'application/json'})

    # Return to the homepage
    return redirect('/')
 #+END_SRC

*** Lancer l'application
Reste plus qu'à lancer le programme.

Démarrer le serveur
#+BEGIN_SRC bash  -i
$ export FLASK_APP=node_server.py
$ flask run --port 8000
#+END_SRC

dans un autre terminal lancer l'application
#+BEGIN_SRC bash  -i
$ python run_app.py
#+END_SRC

Le programme devrait tourner sur http:://localhost:5000
**** Plusieurs noeuds

     On peut enregsitrer plusieurs noeud en faisant
#+BEGIN_SRC bash  -i
# already running
$ flask run --port 8000 &
# spinning up new nodes
$ flask run --port 8001 &
$ flask run --port 8002 &
#+END_SRC

et
#+BEGIN_SRC bash  -i
$ curl -X POST \
  http://127.0.0.1:8001/register_with \
  -H 'Content-Type: application/json' \
  -d '{"node_address": "http://127.0.0.1:8000"}'

$ curl -X POST \
  http://127.0.0.1:8002/register_with \
  -H 'Content-Type: application/json' \
  -d '{"node_address": "http://127.0.0.1:8000"}'
#+END_SRC

les nouveaux noeuds sur les port 8001 et 8002 vont se synchroniser

Pour mettre à jour le noeud avec lequel l'application se synchronise (localhost port 8000) il faut changer CONNECTED_NODE_ADDRESS dans views.py

Une fois tout ça fait, nous pouvons lancer l'application avec
#+BEGIN_SRC bash  -i
python run_app.py
#+END_SRC
et créer de nouvelles transaction (publier des messages via l'interface web) et quand on mine les transaction tous les noeuds du réseau vont se mettre à jour leur chaine.  Nous pouvons vérifier les chaine en regardant /chain avec cUrl
#+BEGIN_SRC bash  -i
$ curl -X GET http://localhost:8001/chain
$ curl -X GET http://localhost:8002/chain
#+END_SRC

*** Authentification
Il y a un problème dans notre application.  N'importe qui peut publier n'importe quoi.  Donc il faut un mecanisme pour authentifier les transactions.  C'est là qu'interviennent les pairs de clefs public/privée.

- Chaque transaction doit être signé (avec la clef privé) et cette signature est ajouté au message ainsi que la clef publique.
- Pendant la vérification, on vérifie que celui qui dit avoir écrit la transaction (clef public) est bien celui qui a signé.

*** la suite
Essayer à plusieurs en utilisant [[https://www.ngrok.com/][ngrok]] pour créer une adresse publique à partir de on server local
